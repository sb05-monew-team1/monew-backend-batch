### 사용자 관리

**정보**

- 사용자는 다음의 정보를 가집니다.
    - 이메일
    - 닉네임
    - 비밀번호
- 각 정보의 적절한 유효성 검사가 이루어져야 합니다.

**등록(회원가입)**

- 이메일은 중복될 수 없습니다.

**수정**

- 닉네임만 수정할 수 있습니다.

**삭제**

- 관련된 정보가 유지되도록 논리 삭제를 기본 원칙으로 하세요.
    - 논리 삭제 후 1일 경과 뒤 유저 정보가 완전히 삭제되도록 하세요.
    
    <aside>
    ⚠️
    
    프로토타입에서는 원활한 테스트 환경을 위해 5분 뒤 복구되도록 구현되었습니다.
    
    </aside>
    
- 단, 물리 삭제 시 관련된 정보도 모두 삭제되도록 하세요.

**로그인**

- 이메일, 비밀번호로 로그인할 수 있습니다.

<aside>
💡

로그인에 성공한 사용자의 모든 요청 헤더(`MoNew-Request-User-ID`)에 사용자의 ID가 포함됩니다.

</aside>

<aside>
💡

로그인을 제외한 모든 화면은 로그인한 사용자만 볼 수 있습니다.

</aside>

### 관심사 관리

정보

- 관심사는 다음의 정보를 포함합니다.
    - 관심사 이름
    - 키워드
    - 구독자 수

등록

- 80% 이상 유사한 이름의 관심사가 있다면 등록할 수 없습니다.
- 키워드는 여러 개를 가질 수 있으며, 뉴스 기사 검색에 활용됩니다.

수정

- 키워드만 수정할 수 있습니다.

삭제

- 관심사는 삭제할 수 있습니다.

목록 조회

- 검색어로 다음의 속성 중 하나라도 부분일치하는 데이터를 검색할 수 있습니다.
    - 관심사 이름, 키워드
- 다음의 속성으로 정렬 및 커서 페이지네이션을 구현합니다.
    - 관심사 이름, 구독자 수

구독

- 사용자는 관심사를 구독할 수 있습니다.
- 구독한 관심사와 관련된 뉴스 기사가 등록되면 알림을 받을 수 있습니다.

### 뉴스 기사 관리

**정보**

- 뉴스 기사는 다음의 정보를 포함합니다.
    - 출처
    - 원본 기사 링크
    - 제목
    - 날짜
    - 요약
    - 댓글
    - 관심사
    - 조회수
        - 같은 사용자가 여러 번 조회해도 1회로 간주합니다.

수집

- 다양한 출처를 통해 뉴스 기사를 수집합니다.
    - 출처 예시
        - [Naver `API`](https://developers.naver.com/docs/serviceapi/search/news/news.md)
        - [한국 경제 `RSS`](https://www.hankyung.com/feed)
        - [조선 일보 `RSS`](https://rssplus.chosun.com/)
        - [연합 뉴스 `RSS`](https://www.yonhapnewstv.co.kr/add/rss)
- 수집한 기사 중 관심사의 키워드를 포함하는 뉴스 기사만 저장합니다.
- 원본 기사 링크는 중복될 수 없습니다.
- 기사 수집은 매 시간 배치로 수행합니다.

삭제

- 관련된 정보가 유지되도록 논리 삭제를 기본 원칙으로 하세요.
- 단, 물리 삭제 시 관련된 정보도 모두 삭제되도록 하세요.

목록 조회

- 하나의 검색어로 다음의 속성 중 하나라도 부분일치하는 데이터를 검색할 수 있습니다.
    - 제목, 요약
- 다음의 속성으로 조회할 수 있습니다.
    - 관심사, 출처, 날짜
    - 조회 조건이 여러 개인 경우 모든 조건을 만족한 결과로 조회합니다.
- 다음의 속성으로 정렬 및 커서 페이지네이션을 구현합니다.
    - 날짜, 댓글 수, 조회 수
    - 선택적으로 1개의 정렬 조건만 가질 수 있습니다.

백업 및 복구

- 기사 수집 배치 작업에 따른 데이터 유실에 대비해 뉴스 기사 데이터를 백업합니다.
    - 날짜 단위로 백업하세요.
    - 백업 저장소는 AWS S3를 활용하세요.
    - 백업 작업은 배치로 수행합니다.
- 날짜 별로 뉴스 기사를 복구할 수 있습니다.
    - (S3에 저장된) 백업 데이터와 (DB에 저장된) 현재 데이터를 비교해 유실된 데이터를 새로 등록합니다.

### 댓글 관리

정보

- 댓글은 다음의 정보를 포함합니다.
    - 뉴스 기사 정보
    - 사용자 정보
    - 내용
    - 날짜
    - 좋아요

등록

- 뉴스 기사 별 댓글을 등록할 수 있습니다.

수정

- 본인이 작성한 댓글만 수정할 수 있습니다.

삭제

- 관련된 정보가 유지되도록 논리 삭제를 기본 원칙으로 하세요.
- 단, 물리 삭제 시 관련된 정보도 모두 삭제되도록 하세요.
    
    <aside>
    ⚠️
    
    물리 삭제 기능은 UI로 제공하지 않습니다. 테스트 코드를 통해 검증하세요.
    
    </aside>
    

뉴스 기사 별 목록 조회

- 다음의 속성으로 정렬 및 커서 페이지네이션을 구현합니다.
    - 날짜, 좋아요 수
    - 선택적으로 1개의 정렬 조건만 가질 수 있습니다.

좋아요

- 댓글마다 좋아요 또는 좋아요 취소할 수 있습니다.

### 활동 내역 관리

정보

- 활동 내역은 다음의 정보를 포함합니다.
    - 사용자 정보
    - 구독 중인 관심사
    - 최근 작성한 댓글 (최대 10건)
    - 최근 좋아요를 누른 댓글 (최대 10건)
    - 최근 본 뉴스 기사 (최대 10건)

조회

- 사용자 별 활동 내역을 조회할 수 있습니다.

### 알림 관리

정보

- 알림은 다음의 정보를 포함합니다.
    - 사용자 정보
    - 내용
    - 관련 리소스 정보
    - 확인 여부

등록

- 구독 중인 관심사와 관련된 기사가 새로 등록된 경우 알림이 생성됩니다.
    - 내용: `[관심사]와 관련된 기사가 0건 등록되었습니다.`
    - 관련 리소스 정보: 관심사
- 내가 작성한 댓글에 좋아요가 눌리면 알림이 생성됩니다.
    - 내용: `[사용자]님이 나의 댓글을 좋아합니다.`
    - 관련 리소스 정보: 댓글

수정

- 알림을 확인하면 확인 여부를 수정합니다.
- 모든 알림을 한번에 확인할 수 있습니다.

삭제

- 확인한 알림 중 1주일이 경과된 알림은 자동으로 삭제됩니다.
- 삭제는 매일 배치로 수행합니다.

목록 조회

- 확인하지 않은 알림만 조회합니다.
- 시간 순으로 정렬 및 커서 페이지네이션을 구현합니다.

기술 요구 사항

### 유효성 검사

- Bean Validation을 활용해 유효성 검사를 진행하세요.

### 커스텀 예외

- 커스텀 예외를 적절히 설계하세요.

### 로그 관리

- 요청 별 ID, IP 주소를 MDC에 추가하고 로그 메시지 및 응답 헤더에 추가하세요.
- 날짜 별 로그를 S3에 주기적으로 적재하세요. `심화`

### 테스트 주도 개발

- Red-Green-Refactor 사이클을 준수해 구현하세요. 이때 각 단계 별 커밋을 남기세요.
- 프로젝트 전체 테스트 커버리지는 80% 이상을 유지하세요.
    - 테스트 커버리지를 배지로 메인 브랜치의 README에 표시하세요.

### CI/CD 파이프라인 구축

- 깃 브랜치 전략을 수립하고, GitHub Actions를 활용해 CI/CD 파이프라인을 구축하세요.
- PR 생성시 테스트가 수행되도록하고, 테스트 커버리지 80% 이상을 달성하세요.
- AWS ECS를 통해 자동으로 배포되도록 하세요.

### Spring Batch 활용한 안정적인 배치 관리 `심화`

- Spring Batch를 활용해 배치 작업을 관리하세요.
- 커스텀 메트릭을 정의해 Spring Actuator를 통해 배치 작업 데이터를 모니터링하세요.

### MongoDB를 활용한 조회 최적화 `심화`

- 사용자 별 활동 내역 조회 시 조인이 과도하게 많이 발생하는 문제를 해결합니다.
- 사용자 활동 내역을 조회용 도메인 모델로 정의하고, 사용자 활동이 이루어질 때마다 조회용 도메인 모델을 미리 업데이트합니다.
- 이러한 역정규화 모델의 특성을 고려해 MongoDB를 통해 관리하세요.